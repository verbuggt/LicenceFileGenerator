package net.exploit.licencegen.main;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class LicenceGenerator {

	private GUI gui;

	public LicenceGenerator(GUI gui) {
		this.gui = gui;
	}

	private boolean wasRandom = false;
	private String oldUsername = null;
	private KeyGenerator keygen = new KeyGenerator();

	public void clickCallback(String username, String path) {
		path = getFormatedPath(path);
		File f = new File(path);

		if (!f.exists())
			f.mkdirs();
		if (username.isEmpty() || (this.wasRandom && username.equals(this.oldUsername))) {
			username = keygen.getRandomKey(8);
			this.oldUsername = username;
			this.wasRandom = true;
		} else {
			this.oldUsername = username;
			this.wasRandom = false;
		}
		generate(username, path);
	}

	private String getFormatedPath(String path) {
		if(path.isEmpty())
			return path;
		path = path.replace(".", "").replace(";", "").replace(":", "").replace("\"", "");
		if (!path.endsWith("/"))
			path = path + "/";
		return path;
	}

	private void generate(String username, String path) {
		String licence = getRandomLicence();
		String hash = toHashValue(licence);
		this.gui.setLicence(licence);
		this.gui.setHash(hash);
		if (this.gui.getUsername() != username)
			this.gui.setUsername(username);
		saveLicenceFile(username, licence, hash, path);
	}

	private void saveLicenceFile(String username, String licence, String hash, String path) {
		File f = new File(path + username + ".key");
		if (!f.exists())
			try {
				f.createNewFile();
			} catch (IOException e) {
				saveCrashReport(e);
				this.gui.setStatus("An error occurred while creating the licence-file");
			}
		else {
			this.gui.setStatus("File already exists");
			this.gui.setHash("");
			this.gui.setLicence("");
			return;
		}
		try {
			FileWriter fw = new FileWriter(f);
			fw.write(hash);
			fw.flush();
			fw.close();
			this.gui.setStatus("Licence-file for user '" + username + "' created");
			addToLicenceStorage(username, licence, hash, path);
		} catch (IOException e) {
			saveCrashReport(e);
			this.gui.setStatus("An error occurred while writing to the licence-file");
		}
	}

	private void addToLicenceStorage(String username, String licence, String hash, String path) {
		File file = new File(path + "licences.yml");
		boolean b = false;
		if (!file.exists())
			try {
				file.createNewFile();
				b = true;
			} catch (IOException ioException) {
				this.gui.setStatus("An error occurred while creating licence-log-file");
			}
		try (FileWriter fw = new FileWriter(file, true); PrintWriter out = new PrintWriter(new BufferedWriter(fw))) {
			if (b)
				out.println("  User  :         Licence        :           Hash-Value           ");
			out.println(username + ":" + licence + ":" + hash);
			out.flush();
			out.close();
			fw.close();
		} catch (IOException e) {
			this.gui.setStatus("An error occurred while saving licence to log-file");
		}
	}

	private String getRandomLicence() {
		return keygen.getRandomKey(24);
	}

	private String toHashValue(String base) {
		String result = "";
		try {
			MessageDigest m = MessageDigest.getInstance("MD5");
			m.reset();
			m.update(base.getBytes());
			BigInteger bigInteger = new BigInteger(1, m.digest());
			String hash = bigInteger.toString(16);
			while (hash.length() < 32) {
				hash = "0" + hash;
			}
			result = hash;
		} catch (NoSuchAlgorithmException e) {
			saveCrashReport(e);
			e.printStackTrace();
		}
		return result;
	}

	private void saveCrashReport(Exception exception) {
		try {
			File report = new File("LicenceGenerator_crash-report_"
					+ new SimpleDateFormat("yyyy-MM-dd HH-mm-ss").format(new Date(System.currentTimeMillis())));
			if (!report.exists()) {
				report.createNewFile();
			}
			PrintWriter out = new PrintWriter(report);
			out.println(exception.getMessage());
			exception.printStackTrace(out);
			out.close();
		} catch (Exception ex) {
		}
	}

}
